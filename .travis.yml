language: rust
cache:
  directories:
    - /home/travis/.cargo

before_cache:
  - rm -rf /home/travis/.cargo/registry

rust:
  - stable
  - beta
  - nightly
os:
  - linux
  - osx
  - windows
jobs:
  include:
    - name: Hash Tests 1
      env: TEST_HASHES_SEC_1='true'
    - name: Hash Tests 2
      env: TEST_HASHES_SEC_2='true'
    - name: SerializationTests
      env: TEST_SERIALIZE='true'
    - name: StructureTests
      env: TEST_BACKEND='true'
    - name: Audit
      env: AUDIT='true'
  allow_failures:
    - rust: nightly
  fast_finish: true

env:
  - RUSTFLAGS='-C link-dead-code'

before_install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      sudo apt-get update
    fi
  - |
    if [[ "$AUDIT" == "true" ]]; then
      cargo install --force cargo-audit
    fi
  - export NUM_TEST_THREADS=8

dist: bionic
addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - cmake
      - gcc
      - binutils-dev
      - zlib1g-dev
      - libiberty-dev

# Add clippy
before_script:
  - |
    if [[ "$TRAVIS_RUST_VERSION" == "nightly" ]]; then
      ( ( cargo install clippy && export CLIPPY=true ) || export CLIPPY=false );
    fi
  - export PATH=$PATH:~/.cargo/bin

script:
  - cargo build --verbose --all
  - |
    if [[ "$AUDIT" == "true" ]]; then
    ( cargo audit );
    fi
  - cargo test --verbose --all -- --test-threads $NUM_TEST_THREADS
  - |
    if [[ "$TEST_SERIALIZE" == "true" ]]; then
      ( cargo test --features="bincode" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_SERIALIZE" == "true" ]]; then
      ( cargo test --features="json" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_SERIALIZE" == "true" ]]; then
      ( cargo test --features="cbor" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_SERIALIZE" == "true" ]]; then
      ( cargo test --features="yaml" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_SERIALIZE" == "true" ]]; then
      ( cargo test --features="pickle" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_SERIALIZE" == "true" ]]; then
      ( cargo test --features="ron" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_1" == "true" ]]; then
      ( cargo test --features="blake2b" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_1" == "true" ]]; then
      ( cargo test --features="groestl" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_1" == "true" ]]; then
      ( cargo test --features="sha2" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_1" == "true" ]]; then
      ( cargo test --features="sha3" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_1" == "true" ]]; then
      ( cargo test --features="keccak" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_1" == "true" ]]; then
      ( cargo test --features="seahash" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_1" == "true" ]]; then
      ( cargo test --features="fx" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_1" == "true" ]]; then
      ( cargo test --features="blake2b_rfc" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_2" == "true" ]]; then
      ( cargo test --features="md2" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_2" == "true" ]]; then
      ( cargo test --features="md4" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_2" == "true" ]]; then
      ( cargo test --features="md5" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_2" == "true" ]]; then
      ( cargo test --features="ripemd160" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_2" == "true" ]]; then
      ( cargo test --features="sha1" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_2" == "true" ]]; then
      ( cargo test --features="rust_sha2" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_2" == "true" ]]; then
      ( cargo test --features="rust_sha3" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_2" == "true" ]]; then
      ( cargo test --features="rust_keccak" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_HASHES_SEC_2" == "true" ]]; then
      ( cargo test --features="whirlpool" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_BACKEND" == "true" ]]; then
      ( cargo test --features="hashbrown" --verbose --all -- --test-threads $NUM_TEST_THREADS );
    fi
  - |
    if [[ "$TEST_BACKEND" == "true" ]]; then
      ( cargo test --features="rocksdb bincode fx" --verbose --all -- --test-threads 1 );
    fi
  - |
      if [[ "$TRAVIS_RUST_VERSION" == "nightly" && $CLIPPY ]]; then
        cargo clippy
      fi


after_success:
  # Coverage report
  - |
    if [[ "$TRAVIS_RUST_VERSION" == "stable" && "$TRAVIS_OS_NAME" == "linux" ]]; then
      wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
      tar xzf master.tar.gz &&
      cd kcov-master &&
      mkdir build &&
      cd build &&
      cmake .. &&
      make &&
      sudo make install &&
      cd ../.. &&
      rm -rf kcov-master &&
      for crate in starling; do for file in target/debug/$crate-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done; done &&
      for crate in merkle_bit; do for file in target/debug/$crate-*[^\.d]; do mkdir -p "target/cov/$(basename $file)"; kcov --exclude-pattern=/.cargo,/usr/lib --verify "target/cov/$(basename $file)" "$file"; done; done &&
      bash <(curl -s https://codecov.io/bash) &&
      echo "Uploaded code coverage"
    fi